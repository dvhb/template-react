/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.5
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ICategory,
    ICategoryFromJSON,
    ICategoryFromJSONTyped,
    ICategoryToJSON,
    ITag,
    ITagFromJSON,
    ITagFromJSONTyped,
    ITagToJSON,
} from './';

/**
 * 
 * @export
 * @interface IPet
 */
export interface IPet {
    /**
     * 
     * @type {number}
     * @memberof IPet
     */
    id?: number;
    /**
     * 
     * @type {ICategory}
     * @memberof IPet
     */
    category?: ICategory;
    /**
     * 
     * @type {string}
     * @memberof IPet
     */
    name: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IPet
     */
    photoUrls: Array<string>;
    /**
     * 
     * @type {Array<ITag>}
     * @memberof IPet
     */
    tags?: Array<ITag>;
    /**
     * pet status in the store
     * @type {string}
     * @memberof IPet
     */
    status?: IPetStatusEnum;
}

/**
* @export
* @enum {string}
*/
export enum IPetStatusEnum {
    Available = 'available',
    Pending = 'pending',
    Sold = 'sold'
}

export function IPetFromJSON(json: any): IPet {
    return IPetFromJSONTyped(json, false);
}

export function IPetFromJSONTyped(json: any, ignoreDiscriminator: boolean): IPet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'category': !exists(json, 'category') ? undefined : ICategoryFromJSON(json['category']),
        'name': json['name'],
        'photoUrls': json['photoUrls'],
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(ITagFromJSON)),
        'status': !exists(json, 'status') ? undefined : json['status'],
    };
}

export function IPetToJSON(value?: IPet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'category': ICategoryToJSON(value.category),
        'name': value.name,
        'photoUrls': value.photoUrls,
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(ITagToJSON)),
        'status': value.status,
    };
}


